{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire(\"../declarations/window\");\n/**\n * The Unity Context.\n */\n\n\nvar UnityContext =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the Unity context model.\n   * @param {IUnityConfig} unityConfig The Unity config used to build the player.\n   */\n  function UnityContext(unityConfig) {\n    this.unityConfig = unityConfig;\n    /**\n     * A list of the UnityEvents binded to this unityContext.\n     * @type {IUnityEvent[]}\n     */\n\n    this.unityEvents = [];\n    if (typeof window.ReactUnityWebGL === \"undefined\") window.ReactUnityWebGL = {};\n  }\n  /**\n   * Sets the reference to the UnityComponent.\n   * @param {UnityComponent} unityComponentReference the target unity component.\n   */\n\n\n  UnityContext.prototype.setComponentReference = function (unityComponentReference) {\n    this.unityComponentReference = unityComponentReference;\n  };\n  /**\n   * Sets the reference of the UnityInstance.\n   * @param {UnityInstance} unityInstance the target unityInstance.\n   */\n\n\n  UnityContext.prototype.setUnityInstance = function (unityInstance) {\n    this.unityInstance = unityInstance;\n  };\n  /**\n   * Quits the Unity Instance and clears it from memory.\n   */\n\n\n  UnityContext.prototype.quitUnityInstance = function () {\n    var _this = this;\n\n    if (typeof this.unityInstance !== \"undefined\") this.unityInstance.Quit().then(function () {\n      _this.invokeEventListener(\"quitted\");\n\n      _this.unityInstance = undefined;\n    });\n  };\n  /**\n   * Sends a message to the UnityInstance to invoke a public method.\n   * @param {string} gameObjectName the name of the game object in your Unity scene.\n   * @param {string} methodName the name of the public method on the game object.\n   * @param {string | number | boolean} parameter an optional method parameter.\n   */\n\n\n  UnityContext.prototype.send = function (gameObjectName, methodName, parameter) {\n    if (typeof this.unityInstance !== \"undefined\") if (typeof parameter === \"undefined\") this.unityInstance.SendMessage(gameObjectName, methodName);else this.unityInstance.SendMessage(gameObjectName, methodName, parameter);\n  };\n  /**\n   * Registers an event listener for the Unity player. These can be\n   * system events like when the player is initialized or loader and\n   * your custom events from Unity.\n   * @param {string} eventName the event name\n   * @param {Function} eventListener the event function\n   * @returns {any} The Function\n   */\n\n\n  UnityContext.prototype.on = function (eventName, eventListener) {\n    this.unityEvents.push({\n      eventName: eventName,\n      eventCallback: eventListener\n    });\n\n    window.ReactUnityWebGL[eventName] = function (parameter) {\n      return eventListener(parameter);\n    };\n  };\n  /**\n   * Invokes an event listener that has been registered using the on function.\n   * @param {string} eventName the event name\n   * @param {Function} eventValue the event value\n   */\n\n\n  UnityContext.prototype.invokeEventListener = function (eventName, eventValue) {\n    for (var _i = 0, _a = this.unityEvents; _i < _a.length; _i++) {\n      var _unityEvent = _a[_i];\n      if (_unityEvent.eventName === eventName) _unityEvent.eventCallback(eventValue);\n    }\n  };\n  /**\n   * Enables or disabled the fullscreen mode of the UnityInstance.\n   * @param {boolean} enabled\n   */\n\n\n  UnityContext.prototype.setFullscreen = function (enabled) {\n    if (typeof this.unityInstance !== \"undefined\") this.unityInstance.SetFullscreen(enabled === true ? 1 : 0);\n  };\n\n  return UnityContext;\n}();\n\nexports.default = UnityContext;","map":{"version":3,"sources":["../../source/models/unityContext.ts"],"names":[],"mappings":";;;;;;AAAA,OAAA,CAAA,wBAAA,CAAA;AAKA;;AAEG;;;AACH,IAAA,YAAA;AAAA;AAAA,YAAA;AAmBE;;;AAGG;AACH,WAAA,YAAA,CAAmB,WAAnB,EAA4C;AAAzB,SAAA,WAAA,GAAA,WAAA;AAVnB;;;AAGG;;AACK,SAAA,WAAA,GAA6B,EAA7B;AAON,QAAI,OAAQ,MAAc,CAAC,eAAvB,KAA2C,WAA/C,EACG,MAAc,CAAC,eAAf,GAAiC,EAAjC;AACJ;AAED;;;AAGG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAP,UAA6B,uBAA7B,EAAoE;AAClE,SAAK,uBAAL,GAA+B,uBAA/B;AACD,GAFM;AAIP;;;AAGG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,aAAxB,EAAoD;AAClD,SAAK,aAAL,GAAqB,aAArB;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,OAAO,KAAK,aAAZ,KAA8B,WAAlC,EACE,KAAK,aAAL,CAAmB,IAAnB,GAA0B,IAA1B,CAA+B,YAAA;AAC7B,MAAA,KAAI,CAAC,mBAAL,CAAyB,SAAzB;;AACA,MAAA,KAAI,CAAC,aAAL,GAAqB,SAArB;AACD,KAHD;AAIH,GANM;AAQP;;;;;AAKG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UACE,cADF,EAEE,UAFF,EAGE,SAHF,EAGuC;AAErC,QAAI,OAAO,KAAK,aAAZ,KAA8B,WAAlC,EACE,IAAI,OAAO,SAAP,KAAqB,WAAzB,EACE,KAAK,aAAL,CAAmB,WAAnB,CAA+B,cAA/B,EAA+C,UAA/C,EADF,KAGE,KAAK,aAAL,CAAmB,WAAnB,CAA+B,cAA/B,EAA+C,UAA/C,EAA2D,SAA3D;AACL,GAVM;AAYP;;;;;;;AAOG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,EAAA,GAAP,UAAU,SAAV,EAA6B,aAA7B,EAAoD;AAClD,SAAK,WAAL,CAAiB,IAAjB,CAAsB;AAAE,MAAA,SAAS,EAAA,SAAX;AAAa,MAAA,aAAa,EAAE;AAA5B,KAAtB;;AACC,IAAA,MAAc,CAAC,eAAf,CAA+B,SAA/B,IAA4C,UAAC,SAAD,EAAe;AAC1D,aAAA,aAAa,CAAC,SAAD,CAAb;AAAwB,KADzB;AAEF,GAJM;AAMP;;;;AAIG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,SAA3B,EAA8C,UAA9C,EAA8D;AAC5D,SAAwB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,WAA7B,EAAwB,EAAA,GAAA,EAAA,CAAA,MAAxB,EAAwB,EAAA,EAAxB,EAAwC;AAAnC,UAAI,WAAW,GAAA,EAAA,CAAA,EAAA,CAAf;AACH,UAAI,WAAW,CAAC,SAAZ,KAA0B,SAA9B,EACE,WAAW,CAAC,aAAZ,CAA0B,UAA1B;AAAsC;AAC3C,GAJM;AAMP;;;AAGG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAAqC;AACnC,QAAI,OAAO,KAAK,aAAZ,KAA8B,WAAlC,EACE,KAAK,aAAL,CAAmB,aAAnB,CAAiC,OAAO,KAAK,IAAZ,GAAmB,CAAnB,GAAuB,CAAxD;AACH,GAHM;;AAIT,SAAA,YAAA;AAAC,CA1GD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"../declarations/window\");\n/**\n * The Unity Context.\n */\nvar UnityContext = /** @class */ (function () {\n    /**\n     * Creates a new instance of the Unity context model.\n     * @param {IUnityConfig} unityConfig The Unity config used to build the player.\n     */\n    function UnityContext(unityConfig) {\n        this.unityConfig = unityConfig;\n        /**\n         * A list of the UnityEvents binded to this unityContext.\n         * @type {IUnityEvent[]}\n         */\n        this.unityEvents = [];\n        if (typeof window.ReactUnityWebGL === \"undefined\")\n            window.ReactUnityWebGL = {};\n    }\n    /**\n     * Sets the reference to the UnityComponent.\n     * @param {UnityComponent} unityComponentReference the target unity component.\n     */\n    UnityContext.prototype.setComponentReference = function (unityComponentReference) {\n        this.unityComponentReference = unityComponentReference;\n    };\n    /**\n     * Sets the reference of the UnityInstance.\n     * @param {UnityInstance} unityInstance the target unityInstance.\n     */\n    UnityContext.prototype.setUnityInstance = function (unityInstance) {\n        this.unityInstance = unityInstance;\n    };\n    /**\n     * Quits the Unity Instance and clears it from memory.\n     */\n    UnityContext.prototype.quitUnityInstance = function () {\n        var _this = this;\n        if (typeof this.unityInstance !== \"undefined\")\n            this.unityInstance.Quit().then(function () {\n                _this.invokeEventListener(\"quitted\");\n                _this.unityInstance = undefined;\n            });\n    };\n    /**\n     * Sends a message to the UnityInstance to invoke a public method.\n     * @param {string} gameObjectName the name of the game object in your Unity scene.\n     * @param {string} methodName the name of the public method on the game object.\n     * @param {string | number | boolean} parameter an optional method parameter.\n     */\n    UnityContext.prototype.send = function (gameObjectName, methodName, parameter) {\n        if (typeof this.unityInstance !== \"undefined\")\n            if (typeof parameter === \"undefined\")\n                this.unityInstance.SendMessage(gameObjectName, methodName);\n            else\n                this.unityInstance.SendMessage(gameObjectName, methodName, parameter);\n    };\n    /**\n     * Registers an event listener for the Unity player. These can be\n     * system events like when the player is initialized or loader and\n     * your custom events from Unity.\n     * @param {string} eventName the event name\n     * @param {Function} eventListener the event function\n     * @returns {any} The Function\n     */\n    UnityContext.prototype.on = function (eventName, eventListener) {\n        this.unityEvents.push({ eventName: eventName, eventCallback: eventListener });\n        window.ReactUnityWebGL[eventName] = function (parameter) {\n            return eventListener(parameter);\n        };\n    };\n    /**\n     * Invokes an event listener that has been registered using the on function.\n     * @param {string} eventName the event name\n     * @param {Function} eventValue the event value\n     */\n    UnityContext.prototype.invokeEventListener = function (eventName, eventValue) {\n        for (var _i = 0, _a = this.unityEvents; _i < _a.length; _i++) {\n            var _unityEvent = _a[_i];\n            if (_unityEvent.eventName === eventName)\n                _unityEvent.eventCallback(eventValue);\n        }\n    };\n    /**\n     * Enables or disabled the fullscreen mode of the UnityInstance.\n     * @param {boolean} enabled\n     */\n    UnityContext.prototype.setFullscreen = function (enabled) {\n        if (typeof this.unityInstance !== \"undefined\")\n            this.unityInstance.SetFullscreen(enabled === true ? 1 : 0);\n    };\n    return UnityContext;\n}());\nexports.default = UnityContext;\n//# sourceMappingURL=unityContext.js.map"]},"metadata":{},"sourceType":"script"}